name: Deploy Lambda with Terraform

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 22

    - name: Install Node.js Dependencies
      working-directory: lambda
      run: npm install

    - name: Prepare Zip Artifact
      working-directory: lambda
      run: npm run prepare-zip

    - name: Get Lambda Version
      working-directory: lambda
      id: get_version
      run: echo "VERSION=$(node -p 'require(\"./package.json\").version')" >> $GITHUB_ENV

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.9.8

    - name: Initialize Terraform
      working-directory: terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: "ap-southeast-2"
      run: terraform init

    - name: Plan Terraform Changes
      working-directory: terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: "ap-southeast-2"
        VERSION: ${{ env.VERSION }}
        TF_VAR_lambda_version: ${{ steps.get_version.outputs.version }}
      run: terraform plan -var="lambda_version=$VERSION"

    - name: Apply Terraform Changes
      working-directory: terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: "ap-southeast-2"
        VERSION: ${{ env.VERSION }}
        TF_VAR_lambda_version: ${{ steps.get_version.outputs.version }}
      run: terraform apply -var="lambda_version=$VERSION" -auto-approve

    - name: Clean Temporary Files
      working-directory: lambda
      run: npm run clean